* Ideas
** Make a map of computed things and index into it
* To Implement
** DONE Create a type for each tower 
   CLOSED: [2018-07-18 Wed 22:01]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-18 Wed 22:01] \\
     It hardly touched the benchmark which is really wierd...
   - State "IN_PROGRESS" from "TODO"       [2018-07-17 Tue 20:38]
   :END:
** DONE Use an Int for Coords in Moves
   CLOSED: [2018-07-19 Thu 07:21]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-19 Thu 07:21] \\
     It made just about no difference, but it'll make generation a bit
     faster...
   :END:
** DONE Generate all moves upfront then filter
   CLOSED: [2018-07-21 Sat 15:09]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 15:09] \\
     Made the adjustment but it looks like it's worse and I think that it's
     because I zip it and reallocate on each evaluation of fitness.
   - State "IN_PROGRESS" from "TODO"       [2018-07-19 Thu 07:21]
   :END:
** DONE Separate the fitness vector from the move vector
   CLOSED: [2018-07-21 Sat 17:05]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 17:05] \\
     Worked like a charm with higher order zipWith functions.
   - State "IN_PROGRESS" from "TODO"       [2018-07-21 Sat 15:41]
   :END:
** DONE Find the function which is creating Integers
   CLOSED: [2018-07-21 Sat 17:05]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 17:05] \\
     This was incidentally fixed when I separated the fitness vector out.
   - Note taken on [2018-07-21 Sat 15:41] \\
     I'm really not sure.  So I'm moving onto something else while I leave
     my brain to figure it all out.
   - State "IN_PROGRESS" from "TODO"       [2018-07-21 Sat 15:24]
   :END:
** DONE Don't split the random gen so much
   CLOSED: [2018-07-21 Sat 17:05]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 17:05] \\
     I removed this so that I wouldn't allocate as much.
   :END:
** DONE Remove Generics (they're reportedly slow)
   CLOSED: [2018-07-21 Sat 21:00]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 21:00] \\
     Well I've done this and it's made just about no difference
   - State "IN_PROGRESS" from "TODO"       [2018-07-21 Sat 21:00]
   :END:
** DONE Use an Int for a missile
   CLOSED: [2018-07-22 Sun 12:25]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-22 Sun 12:25] \\
     I also made their container an unboxed vector and in the process
     discovered a more efficient and easier to read version of some of my
     state logic.
   :END:
** DONE Use an Int for Each Move
   CLOSED: [2018-07-24 Tue 07:31]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-24 Tue 07:31] \\
     This has allowed for everything to be an unboxed vector and given me
     incredible memory performance.
   - State "IN_PROGRESS" from "TODO"       [2018-07-22 Sun 13:00]
   - State "IN_PROGRESS" from "TODO"       [2018-07-22 Sun 12:26]
   :END:
** DONE Improve the state transition logic
   CLOSED: [2018-07-22 Sun 12:59]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-22 Sun 12:59] \\
     Implemented with memoization.
   - State "IN_PROGRESS" from "TODO"       [2018-07-22 Sun 12:35]
   :END:
I should use unboxed vectors or addition and subtraction where
appropriate.
** DONE Sum up the fitness of each level instead of just the chosen move
   CLOSED: [2018-07-27 Fri 19:35]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-27 Fri 19:35] \\
     I think that this made the bot a bit more predictable, but it makes
     very wierd decisions now.
   :END:
** DONE Get the Old Tests Working Again
   CLOSED: [2018-08-07 Tue 07:46]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-07 Tue 07:46] \\
     I ignored one or two where the logic is more difficult but I'm pretty
     sure that the underlying functionality works because of the rerun
     test.
   - State "IN_PROGRESS" from "TODO"       [2018-07-31 Tue 07:49]
   :END:
** DONE Cache Fitnesses when searching deeper
   CLOSED: [2018-08-07 Tue 07:47]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-07 Tue 07:47] \\
     This is done by virtue of the game tree structure
   :END:
** DONE Implement "True" Monte-Carlo Search
   CLOSED: [2018-08-07 Tue 07:48]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-07 Tue 07:48] \\
     Implemented for the last round and (with a bug in the implementation)
     I did pretty well anyway.
   :END:
** DONE Use Mutable Vectors at the Top Level
   CLOSED: [2018-08-07 Tue 07:48]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-07 Tue 07:48] \\
     I have this in the tree data structure.  It'll do the mutation if it's
     safe.
   :END:
** DONE Dissuade the bot from looking at hits taken
   CLOSED: [2018-08-07 Tue 07:48]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-07 Tue 07:48] \\
     The last heuristic looked purely at the damage I dealt to the opponents
     energy and attack towers and was very effective.
   :END:
** DONE Implement a dot-product version of the heuristic
   CLOSED: [2018-08-18 Sat 13:24]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-18 Sat 13:24] \\
     This proved to be very ineffective and I think that it's because it
     doesn't really capture the reality of the situation and is difficult
     to balance with the energy heuristic.
   :END:
** DONE Implement a bitset version of the engine
   CLOSED: [2018-08-18 Sat 13:25]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-18 Sat 13:25] \\
     This has been very effective.  It now does a series of branch less
     bitwise operations to go from one state to the next.
   :END:
** DONE Don't use a prio queue for construction
   CLOSED: [2018-08-18 Sat 13:26]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-18 Sat 13:26] \\
     This was accomplished with the bitwise implementation.
   :END:
** DONE [#A] Implement Better Tests
   CLOSED: [2018-08-19 Sun 11:01]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-19 Sun 11:01] \\
     Got the tests working and implemented one for the objective.
   :END:
** DONE [#A] Implement a better way of merging trees
   CLOSED: [2018-08-19 Sun 11:11]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-19 Sun 11:11] \\
     Implemented as stated and seems very effective
   - State "IN_PROGRESS" from "TODO"       [2018-08-19 Sun 11:02]
   :END:
It needs to take into account the DC offset from the base fitness.
The solution is to average the scores.
** DONE [#A] Balance the Heuristic with towers lost
   CLOSED: [2018-08-19 Sun 13:40]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-19 Sun 13:40] \\
     Implemented by subtracting energy towers lost
   - State "IN_PROGRESS" from "TODO"       [2018-08-19 Sun 13:03]
   :END:
** DONE [#A] Allow energy towers to be built at the front for defence
   CLOSED: [2018-08-19 Sun 15:28]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-19 Sun 15:28] \\
     Implemented and seems to be effective; however, the reason that I'm
     losing is that Louis' bot wins the attack tower game.

     My latest theory is that the game is won or lost in the moves which
     lead to a one tower advantage in the early game.  If this is the case
     then I can have an early game win/lose heuristic which says that
     you've lost the early game if you have one fewer attack tower than
     your opponent.  To be conservative I think that I'll make it two.
   - State "IN_PROGRESS" from "TODO"       [2018-08-19 Sun 13:41]
   :END:
** DONE [#A] Add having two less attack towers to the loss condition for a game
   CLOSED: [2018-08-20 Mon 08:05]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-20 Mon 08:05] \\
     This seems to improve things a little bit; however the bot can't find
     the right move and I think that it's because it doesn't value moves
     which lead to games which last 50 turns or longer.
   - State "IN_PROGRESS" from "TODO"       [2018-08-19 Sun 15:35]
   :END:
** DONE [#A] Add varying weights for different win conditions
   CLOSED: [2018-08-20 Mon 08:41]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-20 Mon 08:41] \\
     Added and I now sometimes win those matches against Louis's bot, but
     my bot isn't capitalising on the situation.  I think that I should
     then go for the kill, but I'll think about it some more and see.
   - State "IN_PROGRESS" from "TODO"       [2018-08-20 Mon 08:06]
   :END:
** DONE [#A] Remove the constraint on where the opponent can build defence and energy
   CLOSED: [2018-08-26 Sun 15:31]
   :LOGBOOK:
   - CLOSING NOTE [2018-08-26 Sun 15:31] \\
     Added different moves for the opponent and I now can "see" the
     opponents defensive moves to counter my attack from the back line
     move.
   :END:
The problem which I'm fixing here is that the opponent can counteract
an attack with backward attack towers with defence and backward attack
towers of his own, but I don't see it.
** TODO [#A] Improve the heuristic for whether I win the Attack Tower Game
   :LOGBOOK:
   - State "IN_PROGRESS" from "TODO"       [2018-08-26 Sun 15:36]
   :END:
I should only consider it a win if I get ahead and without anything
being placed in the next 5 turns do I maintain the lead, otherwise I
could find a state where I've won the attack tower game, only to lose
it in two turns.
** TODO [#A] Implement different strategies based on board state and turn
*** IN_PROGRESS If turn is below (20?) and opponent has attack towers
    :LOGBOOK:
    - State "IN_PROGRESS" from "TODO"       [2018-08-27 Mon 19:38]
    :END:
Only allow attack towers in rows w/ attack towers
*** TODO If I win the attack tower game
 - go for the energy towers;
 - go for the kill;
** TODO [#A] Take a look at how I narrow the state for energy tower moves
** TODO [#A] Test `advanceState'
** TODO [#B] Use Accelerate for the top-level vector calculations
** TODO [#B] At a certain energy, go for the kill
** TODO [#B] Make a type for each row state
** TODO [#B] Do some maths!!!
** TODO [#C] Use a faster PRNG
Investigate: http://hackage.haskell.org/package/mwc-random
** TODO [#C] Use Vector Algorithms binary search for `chooseOne'
** TODO [#C] Add rewrite rules and always use map* varients of functions
** ABANDONED  Use a deficit algorithm for the hits taken rather than absolute
   :LOGBOOK:
   - Note taken on [2018-08-07 Tue 07:49] \\
     I don't want to track hits taken anymore because it's a poor predictor
     of success early on.
   :END:
** ABANDONED  Try out the DPH compiler optimisations (too old and defunct)
