* Ideas
** Make a map of computed things and index into it
* To Implement
** DONE Create a type for each tower 
   CLOSED: [2018-07-18 Wed 22:01]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-18 Wed 22:01] \\
     It hardly touched the benchmark which is really wierd...
   - State "IN_PROGRESS" from "TODO"       [2018-07-17 Tue 20:38]
   :END:
** DONE Use an Int for Coords in Moves
   CLOSED: [2018-07-19 Thu 07:21]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-19 Thu 07:21] \\
     It made just about no difference, but it'll make generation a bit
     faster...
   :END:
** DONE Generate all moves upfront then filter
   CLOSED: [2018-07-21 Sat 15:09]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 15:09] \\
     Made the adjustment but it looks like it's worse and I think that it's
     because I zip it and reallocate on each evaluation of fitness.
   - State "IN_PROGRESS" from "TODO"       [2018-07-19 Thu 07:21]
   :END:
** DONE Separate the fitness vector from the move vector
   CLOSED: [2018-07-21 Sat 17:05]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 17:05] \\
     Worked like a charm with higher order zipWith functions.
   - State "IN_PROGRESS" from "TODO"       [2018-07-21 Sat 15:41]
   :END:
** DONE Find the function which is creating Integers
   CLOSED: [2018-07-21 Sat 17:05]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 17:05] \\
     This was incidentally fixed when I separated the fitness vector out.
   - Note taken on [2018-07-21 Sat 15:41] \\
     I'm really not sure.  So I'm moving onto something else while I leave
     my brain to figure it all out.
   - State "IN_PROGRESS" from "TODO"       [2018-07-21 Sat 15:24]
   :END:
** DONE Don't split the random gen so much
   CLOSED: [2018-07-21 Sat 17:05]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 17:05] \\
     I removed this so that I wouldn't allocate as much.
   :END:
** DONE Remove Generics (they're reportedly slow)
   CLOSED: [2018-07-21 Sat 21:00]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-21 Sat 21:00] \\
     Well I've done this and it's made just about no difference
   - State "IN_PROGRESS" from "TODO"       [2018-07-21 Sat 21:00]
   :END:
** DONE Use an Int for a missile
   CLOSED: [2018-07-22 Sun 12:25]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-22 Sun 12:25] \\
     I also made their container an unboxed vector and in the process
     discovered a more efficient and easier to read version of some of my
     state logic.
   :END:
** DONE Use an Int for Each Move
   CLOSED: [2018-07-24 Tue 07:31]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-24 Tue 07:31] \\
     This has allowed for everything to be an unboxed vector and given me
     incredible memory performance.
   - State "IN_PROGRESS" from "TODO"       [2018-07-22 Sun 13:00]
   - State "IN_PROGRESS" from "TODO"       [2018-07-22 Sun 12:26]
   :END:
** DONE Improve the state transition logic
   CLOSED: [2018-07-22 Sun 12:59]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-22 Sun 12:59] \\
     Implemented with memoization.
   - State "IN_PROGRESS" from "TODO"       [2018-07-22 Sun 12:35]
   :END:
I should use unboxed vectors or addition and subtraction where
appropriate.
** DONE Sum up the fitness of each level instead of just the chosen move
   CLOSED: [2018-07-27 Fri 19:35]
   :LOGBOOK:
   - CLOSING NOTE [2018-07-27 Fri 19:35] \\
     I think that this made the bot a bit more predictable, but it makes
     very wierd decisions now.
   :END:
** TODO Cache Fitnesses when searching deeper
** TODO Implement "True" Monte-Carlo Search
** TODO Use Mutable Vectors at the Top Level
** TODO Use a faster PRNG
** TODO Disuade the bot from looking at hits taken
** TODO Use a deficit algorithm for the hits taken rather than absolute
** TODO Use Vector Algorithms binary search for `chooseOne'
** TODO Add rewrite rules and always use map* varients of functions
** TODO Make a type for each row state
** TODO Do some maths!!!
** TODO Check for collision with the player when there are no towers on the row
